{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/aes-256/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAwD5C,0BAAiB;;;;IAE3C;;;;;;OAMG;;;;;;;;IAEH,wBAAO;;;;;;;cAAC,SAAiB,EAAE,QAAgB,EAAE,IAAY;QACvD,MAAM,CAAC;KACR;IAED;;;;;;OAMG;;;;;;;;IAEH,wBAAO;;;;;;;cAAC,SAAiB,EAAE,QAAgB,EAAE,IAAY;QACvD,MAAM,CAAC;KACR;IAED;;;;;OAKG;;;;;;;IAEH,kCAAiB;;;;;;cAAC,QAAgB;QAChC,MAAM,CAAC;KACR;IAED;;;;;OAKG;;;;;;;IAEH,iCAAgB;;;;;;cAAC,QAAgB;QAC/B,MAAM,CAAC;KACR;;gBA/CF,UAAU;;;QAUR,OAAO,EAAE;;;;yCAGT;;QASA,OAAO,EAAE;;;;yCAGT;;QAQA,OAAO,EAAE;;;;mDAGT;;QAQA,OAAO,EAAE;;;;kDAGT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA9CU,MAAM;QATlB,MAAM,CAAC;YACN,UAAU,EAAE,QAAQ;YACpB,MAAM,EAAE,kCAAkC;YAC1C,SAAS,EAAE,wBAAwB;YACnC,IAAI,EAAE,4CAA4C;YAClD,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;YAC7B,OAAO,EAAE,2DAA2D;SACrE,CAAC;OAEW,MAAM,EAgDlB;iBAzGD;EAyD4B,iBAAiB;SAAhC,MAAM","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\n/**\n * @name AES256\n * @description\n * This cordova ionic plugin allows you to perform AES 256 encryption and decryption on the plain text.\n * It's a cross-platform plugin which supports both Android and iOS.\n * The encryption and decryption are performed on the device native layer so that the performance is much faster.\n *\n * @usage\n * ```typescript\n * import { AES256 } from '@ionic-native/aes-256';\n *\n * private secureKey: string;\n * private secureIV: string;\n *\n * constructor(private aes256: AES256) {\n *    this.generateSecureKeyAndIV(); // To generate the random secureKey and secureIV\n * }\n *\n * ...\n *\n * async generateSecureKeyAndIV() {\n *    this.secureKey = await this.aes256.generateSecureKey('random password 12345'); // Returns a 32 bytes string\n *    this.secureIV = await this.aes256.generateSecureIV('random password 12345'); // Returns a 16 bytes string\n * }\n *\n * this.aes256.encrypt(this.secureKey, this.secureIV, 'testdata')\n *   .then(res => console.log('Encrypted Data: ',res))\n *   .catch((error: any) => console.error(error));\n *\n * this.aes256.decrypt(this.secureKey, this.secureIV, 'encryptedData')\n *   .then(res => console.log('Decrypted Data : ',res))\n *   .catch((error: any) => console.error(error));\n *\n *\n * * this.aes256.generateSecureKey('random password 12345')\n *   .then(res => console.log('Secure Key : ',res))\n *   .catch((error: any) => console.error(error));\n *\n *\n * * this.aes256.generateSecureIV('random password 12345')\n *   .then(res => console.log('Secure IV : ',res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'AES256',\n  plugin: 'cordova-plugin-aes256-encryption',\n  pluginRef: 'cordova.plugins.AES256',\n  repo: 'https://github.com/Ideas2IT/cordova-aes256',\n  platforms: ['Android', 'iOS'],\n  install: 'ionic cordova plugin add cordova-plugin-aes256-encryption'\n})\n@Injectable()\nexport class AES256 extends IonicNativePlugin {\n\n  /**\n   * This function used to perform the aes256 encryption\n   * @param {string} secureKey A 32 bytes string, which will used as input key for AES256 encryption.\n   * @param {string} secureIV A 16 bytes string, which will used as initial vector for AES256 encryption.\n   * @param {string} data A string which will be encrypted\n   * @return {Promise<string>} Returns a promise that resolves when encryption happens. The success response will returns encrypted data.\n   */\n  @Cordova()\n  encrypt(secureKey: string, secureIV: string, data: string): Promise<string> {\n    return;\n  }\n\n  /**\n   * This function used to perform the aes256 decryption\n   * @param {string} secureKey A 32 bytes string, which will used as input key for AES256 decryption.\n   * @param {string} secureIV A 16 bytes string, which will used as initial vector for AES256 decryption.\n   * @param {string} data An AES256 encrypted data which will be decrypted.\n   * @return {Promise<string>} Returns a promise that resolves when decryption happens. The success response will returns decrypted data.\n   */\n  @Cordova()\n  decrypt(secureKey: string, secureIV: string, data: string): Promise<string> {\n    return;\n  }\n\n  /**\n   * This function used to generate a secure key based on an password. Perfect if you want to delegate the key generation for encryption to the plugin.\n   * Make sure to save the return value of this function somewhere so your encrypted data can be decrypted in the future.\n   * @param {string} password A random string, which will be used as input for a PBKDF2 function\n   * @return {Promise<string>} Returns a promise that resolves when key is generated.\n   */\n  @Cordova()\n  generateSecureKey(password: string): Promise<string> {\n    return;\n  }\n\n  /**\n   * This function used to generate a secure IV based on an password. Perfect if you want to delegate the IV generation for encryption to the plugin.\n   * Make sure to save the return value of this function somewhere so your encrypted data can be decrypted in the future.\n   * @param {string} password A random string, which will be used as input for a PBKDF2 function\n   * @return {Promise<string>} Returns a promise that resolves when IV is generated.\n   */\n  @Cordova()\n  generateSecureIV(password: string): Promise<string> {\n    return;\n  }\n\n}\n"]}